datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

enum UserRole {
  OWNER
  ADMIN
  MODERATOR
  DEVELOPER
  WRITER
  SUPPORTER
  DEFAULT
}

model User {
  id String @id @default(cuid())

  name        String      @unique @map("username")
  enabled     Boolean     @default(false)
  avatarUrl   String?
  accentColor String?
  flair       UserFlairs?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles          UserRoles[]
  password       Password?
  linkedAccounts LinkedAccounts[]

  permissions               Permissions[] @relation("UserPermissions")
  permissionsProvidedBySelf Permissions[] @relation("PermissionProvider")

  posts       Post[] @relation("AuthoredPosts")
  editedPosts Post[] @relation("EditedPosts")

  files File[]
}

model Password {
  userId String @unique
  hash   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model LinkedAccounts {
  id                  String   @id @default(cuid())
  userId              String
  provider            String
  providerAccountId   String
  providerAccountName String?
  linkedAt            DateTime @default(now())

  User User? @relation(fields: [userId], references: [id])

  @@unique([userId, provider])
}

model UserFlairs {
  id      String  @id @default(cuid())
  userId  String? @unique
  text    String?
  bgColor String? @db.VarChar(7)
  fgColor String? @db.VarChar(7)

  user User? @relation(fields: [userId], references: [id])
}

model UserRoles {
  userId String
  title  UserRole @default(DEFAULT)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, title])
}

enum PermissionFlag {
  ABSOLUTE_POWER

  EDIT_USER
  DELETE_USER

  NEW_POST
  EDIT_MY_POST
  EDIT_SOMEONES_POST
  DELETE_MY_POST
  DELETE_SOMEONES_POST

  NEW_CHARACTER
  EDIT_CHARACTER
  DELETE_CHARACTER

  NEW_ASSET
  EDIT_MY_ASSET
  EDIT_SOMEONES_ASSET
  DELETE_MY_ASSET
  DELETE_SOMEONES_ASSET

  DEFAULT
}

model Permissions {
  userId     String
  providerId String?
  value      PermissionFlag @default(DEFAULT)
  grantedAt  DateTime       @default(now())

  user           User  @relation(fields: [userId], references: [id], name: "UserPermissions")
  providedByUser User? @relation(fields: [providerId], references: [id], name: "PermissionProvider")

  @@unique([userId, value])
  @@index([providerId])
}

model File {
  id         String   @id
  uploaderId String?
  s3Key      String
  size       Int
  uploadedAt DateTime @default(now())

  uploader User?     @relation(fields: [uploaderId], references: [id])
  tag      FileTag[]
}

model FileTag {
  id     String @id @default(cuid())
  fileId String
  value  String

  file File @relation(fields: [fileId], references: [id])

  @@unique([fileId, value])
}

// Posts

enum PostType {
  CHARACTER_GUIDE
  GENERAL_GUIDE
  GENERAL
}

enum PostStatus {
  PUBLISHED
  AWAITING_APPROVAL
  HIDDEN
}

model Post {
  id           String       @id @default(cuid())
  slug         String       @unique
  authorId     String?
  type         PostType     @default(GENERAL)
  status       PostStatus   @default(PUBLISHED)
  publishedAt  DateTime     @default(now())
  editedAt     DateTime?
  editorId     String?
  title        String
  description  String?
  tags         String
  thumbnailUrl String?
  lang         String       @db.VarChar(2)
  content      PostContent?

  editor User? @relation(fields: [editorId], references: [id], name: "EditedPosts")
  author User? @relation(fields: [authorId], references: [id], name: "AuthoredPosts")
}

model PostContent {
  id     String @id @default(cuid())
  postId String @unique
  raw    String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// Genshin specific models

enum GenshinVision {
  PYRO
  HYDRO
  ELECTRO
  CRYO
  DENDRO
  ANEMO
  GEO
}

enum GenshinWeapon {
  SWORD
  CLAYMORE
  BOW
  CATALYST
  POLEARM
}

model GenshinCharacter {
  id             String                           @id @default(cuid())
  accentColor    String                           @db.VarChar(7)
  birthDay       Int
  birthMonth     Int
  rarity         Int
  vision         GenshinVision
  weapon         GenshinWeapon
  identity       GenshinCharacterIdentity[]
  constellations GenshinCharacterConstellations[]
  assets         GenshinCharacterAsset[]
}

enum CharacterAssetType {
  ICON
  CARD
  GACHA
  INGAME
  UNKNOWN
}

model GenshinCharacterAsset {
  characterId String
  type        CharacterAssetType @default(UNKNOWN)
  url         String

  character GenshinCharacter @relation(fields: [characterId], references: [id])

  @@unique([characterId, type])
}

model GenshinCharacterIdentity {
  id                 String  @id @default(cuid())
  lang               String  @db.VarChar(2)
  genshinCharacterId String?
  name               String
  description        String

  GenshinCharacter GenshinCharacter? @relation(fields: [genshinCharacterId], references: [id], onDelete: Cascade)

  @@unique([lang, genshinCharacterId])
}

model GenshinCharacterConstellations {
  id                 String  @id @default(cuid())
  lang               String  @db.VarChar(2)
  genshinCharacterId String?
  level              Int
  name               String
  description        String

  GenshinCharacter GenshinCharacter? @relation(fields: [genshinCharacterId], references: [id], onDelete: Cascade)

  @@unique([lang, level, genshinCharacterId])
}
