datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext, pgcrypto]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

enum UserRole {
  OWNER
  ADMIN
  MODERATOR
  DEVELOPER
  WRITER
  SUPPORTER
  DEFAULT
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  name        String      @unique @map("username") @db.Citext
  enabled     Boolean     @default(false)
  avatarUrl   String?
  accentColor String?
  flair       UserFlairs?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles          UserRoles[]
  password       Password?
  linkedAccounts LinkedAccounts[]

  permissions               Permissions[] @relation("UserPermissions")
  permissionsProvidedBySelf Permissions[] @relation("PermissionProvider")

  posts       Post[] @relation("AuthoredPosts")
  editedPosts Post[] @relation("EditedPosts")

  files File[]
}

model Password {
  userId String @unique @db.Uuid
  hash   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model LinkedAccounts {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String   @db.Uuid
  provider            String
  providerAccountId   String
  providerAccountName String?
  linkedAt            DateTime @default(now())

  User User? @relation(fields: [userId], references: [id])

  @@unique([userId, provider])
}

model UserFlairs {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId  String? @unique @db.Uuid
  text    String?
  bgColor String? @db.VarChar(7)
  fgColor String? @db.VarChar(7)

  user User? @relation(fields: [userId], references: [id])
}

model UserRoles {
  userId String   @db.Uuid
  title  UserRole @default(DEFAULT)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, title])
}

enum PermissionFlag {
  ABSOLUTE_POWER

  EDIT_USER
  DELETE_USER

  NEW_POST
  EDIT_MY_POST
  EDIT_SOMEONES_POST
  DELETE_MY_POST
  DELETE_SOMEONES_POST

  NEW_CHARACTER
  EDIT_CHARACTER
  DELETE_CHARACTER

  NEW_ASSET
  EDIT_MY_ASSET
  EDIT_SOMEONES_ASSET
  DELETE_MY_ASSET
  DELETE_SOMEONES_ASSET
  VIEW_ALL_ASSETS

  DEFAULT
}

model Permissions {
  userId     String         @db.Uuid
  providerId String?        @db.Uuid
  value      PermissionFlag @default(DEFAULT)
  grantedAt  DateTime       @default(now())

  user           User  @relation(fields: [userId], references: [id], name: "UserPermissions")
  providedByUser User? @relation(fields: [providerId], references: [id], name: "PermissionProvider")

  @@unique([userId, value])
  @@index([providerId])
}

model File {
  id             String   @id
  uploaderId     String?  @db.Uuid
  s3Key          String
  size           Int
  uploadedAt     DateTime @default(now())
  sha256         String?  @unique
  originalSha256 String?  @unique

  uploader User?     @relation(fields: [uploaderId], references: [id])
  tag      FileTag[]
}

model FileTag {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fileId String
  value  String

  file File @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([fileId, value])
}

// Posts

enum PostType {
  CHARACTER_GUIDE
  GENERAL_GUIDE
  GENERAL
}

enum PostStatus {
  PUBLISHED
  AWAITING_APPROVAL
  HIDDEN
}

model Post {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug         String       @unique
  authorId     String?      @db.Uuid
  type         PostType     @default(GENERAL)
  status       PostStatus   @default(PUBLISHED)
  publishedAt  DateTime     @default(now())
  editedAt     DateTime?
  editorId     String?      @db.Uuid
  title        String
  description  String?
  tags         String
  thumbnailUrl String?
  lang         String       @db.VarChar(2)
  content      PostContent?

  editor User? @relation(fields: [editorId], references: [id], name: "EditedPosts")
  author User? @relation(fields: [authorId], references: [id], name: "AuthoredPosts")
}

model PostContent {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId String @unique @db.Uuid
  raw    String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

////////////////////////////////////////////////////////////////////////////////////
//                                                                                //
//    _____                _     _         _____                            _     //
//   / ____|              | |   (_)       |_   _|                          | |    //
//  | |  __  ___ _ __  ___| |__  _ _ __     | |  _ __ ___  _ __   __ _  ___| |_   //
//  | | |_ |/ _ \ '_ \/ __| '_ \| | '_ \    | | | '_ ` _ \| '_ \ / _` |/ __| __|  //
//  | |__| |  __/ | | \__ \ | | | | | | |  _| |_| | | | | | |_) | (_| | (__| |_   //
//   \_____|\___|_| |_|___/_| |_|_|_| |_| |_____|_| |_| |_| .__/ \__,_|\___|\__|  //
//                                                        | |                     //
//                                                        |_|                     //
//                                                                                //
////////////////////////////////////////////////////////////////////////////////////                 

enum Element {
  PYRO
  HYDRO
  ELECTRO
  CRYO
  DENDRO
  ANEMO
  GEO

  @@map("GenshinElement")
}

enum Weapon {
  SWORD
  CLAYMORE
  BOW
  CATALYST
  POLEARM

  @@map("GenshinWeapon")
}

enum Association {
  MONDSTADT
  LIYUE
  INAZUMA
  SUMERU
  SNEZHNAYA

  @@map("TeyvatAssociation")
}

model CharacterMeta {
  id              String           @id
  accentColor     String           @map("accent_color")
  rarity          Int              @db.SmallInt
  element         Element?
  weapon          Weapon?
  hasVision       Boolean?         @map("has_vision")
  isArchon        Boolean?         @map("is_archon")
  association     Association?
  birthDate       DateTime?        @map("birth_date") @db.Date
  releaseDate     DateTime         @map("release_date") @db.Date
  versionReleased String           @map("version_released")
  entries         CharacterEntry[]
  voiceActors     VoiceActor[]
  assets          CharacterAsset[]
}

enum CharacterAssetType {
  ICON
  AVATAR
  CARD
}

model CharacterAsset {
  id              String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  characterMetaId String?
  characterMeta   CharacterMeta?      @relation(fields: [characterMetaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  type            CharacterAssetType?
  name            String
  description     String?
  url             String              @unique
  isPublic        Boolean             @default(false)
}

model CharacterEntry {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  metaId        String?        @map("meta_id")
  meta          CharacterMeta? @relation(fields: [metaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locale        String
  name          String
  title         String?
  description   String?
  affiliation   String?
  constellation String?


  @@unique([metaId, locale])
}

model VoiceActor {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lang            String
  name            String
  characterMetaId String?
  characterMeta   CharacterMeta? @relation(fields: [characterMetaId], references: [id], onUpdate: Cascade, onDelete: SetNull)
}

// model Character {
//   id          String           @id @db.Citext
//   accentColor Int              @map("accent_color")
//   birthDay    Int?
//   birthMonth  Int?
//   rarity      Int
//   element     Element?
//   hasVision   Boolean?         @map("has_vision")
//   weapon      Weapon
//   association Association?
//   info        CharacterInfo[]
//   assets      CharacterAsset[]

//   @@map("GenshinCharacter")
// }

// model CharacterInfo {
//   entryId       String    @id @default(dbgenerated("gen_random_uuid()")) @map("enrty_id") @db.Uuid
//   entryLanguage String    @default("en") @db.VarChar(2)
//   characterId   String    @map("character_id") @db.Citext
//   details       Character @relation(fields: [characterId], references: [id], onUpdate: Cascade, onDelete: Restrict)
//   name          String
//   title         String?
//   description   String?

//   @@unique([entryLanguage, characterId])
//   @@map("GenshinCharacterInfo")
// }

// model CharacterAsset {
//   id          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   characterId String             @map("character_id") @db.Citext
//   character   Character          @relation(fields: [characterId], references: [id], onUpdate: Cascade, onDelete: Cascade)
//   type        CharacterAssetType @default(UNKNOWN)
//   url         String

//   @@unique([characterId, type])
//   @@map("GenshinCharacterAsset")
// }
