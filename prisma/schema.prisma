// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model AllowedDiscordIds {
    id String @unique
}

enum Role {
    ADMIN
    MODERATOR
    WRITER
    REGULAR
}

model User {
    id            String    @id @default(cuid())
    name          String?
    role          Role      @default(REGULAR)
    createdAt     DateTime  @default(now())
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]    @relation("AuthoredPosts")
    editedPosts   Post[]    @relation("EditedPosts")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// Necessary for Next auth
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum PostType {
    CHARACTER_GUIDE
    GENERAL_GUIDE
    GENERAL
}

enum PostStatus {
    PUBLISHED
    AWAITING_APPROVAL
    HIDDEN
}

model Post {
    id           String       @id @default(cuid())
    slug         String       @unique
    authorId     String?
    type         PostType     @default(GENERAL)
    status       PostStatus   @default(AWAITING_APPROVAL)
    publishedAt  DateTime     @default(now())
    editedAt     DateTime?
    editorId     String?
    title        String
    description  String?
    tags         String
    thumbnailUrl String?
    lang         String       @default("en")
    content      PostContent?

    editor User? @relation(fields: [editorId], references: [id], name: "EditedPosts")
    author User? @relation(fields: [authorId], references: [id], name: "AuthoredPosts")
}

model PostContent {
    id     String @id @default(cuid())
    postId String @unique
    raw    String

    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([id, postId])
}
